var app = angular.module('app', ['appModule']);
//Authentication Service to login
app.factory('AuthService', function ($http) {
    var authService = {};
    authService.login = function (param) {
        return $http.post('/Xpresion/getData', param).then(function (response) {
            var data = {};
            var res = response.data;
            if (res[0].hasOwnProperty("Status")) {
                if (res[0].Status == 1) {
                    data.status = false;
                    data.message = res[0].Message;
                    data.data = null;
                }
            } else {
                data.status = true;
                data.message = 'Successfully logging';
                data.data = data;
                sessionStorage.setItem('isLogged', true)
            }
            return data;
        });
    };
    
    authService.isLogged = function () {
        return sessionStorage.getItem('isLogged') == null ? false : true;
    }

    authService.logout = function () {
        sessionStorage.removeItem('isLogged')
        return true;
    }

    authService.isAuthenticated = function () {
        return !!Session.userId;
    };

    authService.isAuthorised = function (authorisedRole) {
        if (!angular.isArray(authorisedRole)) {
            authorisedRole = [authorisedRole];
        }
        return (authService.isAuthenticated() && authorisedRole.indexOf(Session.userRole) !== -1);
    };

    return authService;
});

app.factory('focus', function ($timeout, $window) {
    return function (id) {
        $timeout(function () {
            var element = document.getElementById(id);
            if (element)
                element.focus();
        })
    }
});

//Get all Session Data from Server to AngularJs
app.service('Session', function ($http) {
    this.getSession = function () {
        return $http.post('/App/getSessionData').then(function (res) {
            return res.data;
        });
    }
})
app.run(['$rootScope', '$state', '$stateParams','deviceDetector',
function ($rootScope, $state, $stateParams, deviceDetector) {
	
    // Attach Fastclick for eliminating the 300ms delay between a physical tap and the firing of a click event on mobile browsers
    FastClick.attach(document.body);

    // Set some reference to access them from any scope
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;

    // GLOBAL APP SCOPE
    $rootScope.errors = [];
    // Device Detector
    $rootScope.device = deviceDetector;
    // set below basic information
    $rootScope.app = {
        name: 'Xpresion', // name of your project
        author: 'BusiSoft', // author's name or company name
        description: 'The \'One Time\' Management Software For Express Industry', // brief description
        version: '1.0', // current version,
        jsVersion: '1.0',
        cssVersion:'1.0',
        year: ((new Date()).getFullYear()), // automatic current year (for copyright information)
        isMobile: (function () {// true if the browser is a mobile device
            var check = false;
            if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                check = true;
            };
            return check;
        })(),
        defaultLayout: {
            isNavbarFixed: true, //true if you want to initialize the template with fixed header
            isSidebarFixed: true, // true if you want to initialize the template with fixed sidebar
            isSidebarClosed: false, // true if you want to initialize the template with closed sidebar
            isFooterFixed: false, // true if you want to initialize the template with fixed footer
            isBoxedPage: false, // true if you want to initialize the template with boxed layout
            theme: 'lyt1-theme-1', // indicate the theme chosen for your project
            logo: 'assets/images/logo.png', // relative path of the project logo
            logoCollapsed: 'assets/images/logo-collapsed.png' // relative path of the collapsed logo
        },
        layout: ''
    };
    $rootScope.app.layout = angular.copy($rootScope.app.defaultLayout);
    $rootScope.user = {
        name: 'Peter',
        job: 'ng-Dev',
        picture: 'app/img/user/02.jpg'
    };
    
}]);


// translate config
app.config(['$translateProvider',
function ($translateProvider) {

    // prefix and suffix information  is required to specify a pattern
    // You can simply use the static-files loader with this pattern:
    $translateProvider.useStaticFilesLoader({
        prefix: 'assets/i18n/',
        suffix: '.json'
    });

    // Since you've now registered more then one translation table, angular-translate has to know which one to use.
    // This is where preferredLanguage(langKey) comes in.
    $translateProvider.preferredLanguage('en');

    // Store the language in the local storage
    $translateProvider.useLocalStorage();

    // Enable sanitize
    $translateProvider.useSanitizeValueStrategy('sanitize');

}]);
// Angular-Loading-Bar
// configuration
app.config(['cfpLoadingBarProvider',
function (cfpLoadingBarProvider) {
    cfpLoadingBarProvider.includeBar = true;
    cfpLoadingBarProvider.includeSpinner = true;

}]);
// Angular-breadcrumb
// configuration
app.config(function ($breadcrumbProvider) {
    $breadcrumbProvider.setOptions({
        template: '<ul class="breadcrumb"><li><a ui-sref="app.dashboard"><i class="fa fa-home margin-right-5 text-large text-dark"></i>Home</a></li><li ng-repeat="step in steps">{{step.ncyBreadcrumbLabel}}</li></ul>'
    });
});
// ng-storage
//set a prefix to avoid overwriting any local storage variables
app.config(['$localStorageProvider',
function ($localStorageProvider) {
    $localStorageProvider.setKeyPrefix('PacketLtr1');
}]);
//filter to convert html to plain text
app.filter('htmlToPlaintext', function () {
      return function (text) {
          return String(text).replace(/<[^>]+>/gm, '');
      };
});
//Custom UI Bootstrap Calendar Popup Template
app.run(["$templateCache", function ($templateCache) {
    $templateCache.put("uib/template/datepickerPopup/popup.html",
        "<div>\n" +
	    "  <ul class=\"uib-datepicker-popup clip-datepicker dropdown-menu\" dropdown-nested ng-if=\"isOpen\" ng-style=\"{top: position.top+'px', left: position.left+'px'}\" ng-keydown=\"keydown($event)\" ng-click=\"$event.stopPropagation()\">\n" +
	    "    <li ng-transclude></li>\n" +
	    "    <li ng-if=\"showButtonBar\" class=\"uib-button-bar\">\n" +
	    "    <span class=\"btn-group pull-left\">\n" +
	    "      <button type=\"button\" class=\"btn btn-sm btn-primary btn-o uib-datepicker-current\" ng-click=\"select('today', $event)\" ng-disabled=\"isDisabled('today')\">{{ getText('current') }}</button>\n" +
	    "      <button type=\"button\" class=\"btn btn-sm btn-primary btn-o uib-clear\" ng-click=\"select(null, $event)\">{{ getText('clear') }}</button>\n" +
	    "    </span>\n" +
	    "      <button type=\"button\" class=\"btn btn-sm btn-primary pull-right uib-close\" ng-click=\"close($event)\">{{ getText('close') }}</button>\n" +
	    "    </li>\n" +
	    "  </ul>\n" +
	    "</div>\n" +
	    "");
	$templateCache.put("uib/template/datepicker/year.html",
	    "<table class=\"uib-yearpicker\" role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
	    "  <thead>\n" +
	    "    <tr>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
	    "      <th colspan=\"{{::columns - 2}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
	    "    </tr>\n" +
	    "  </thead>\n" +
	    "  <tbody>\n" +
	    "    <tr class=\"uib-years\" ng-repeat=\"row in rows track by $index\">\n" +
	    "      <td ng-repeat=\"dt in row\" class=\"uib-year text-center\" role=\"gridcell\"\n" +
	    "        id=\"{{::dt.uid}}\"\n" +
	    "        ng-class=\"::dt.customClass\">\n" +
	    "        <button type=\"button\" class=\"btn btn-default\"\n" +
	    "          uib-is-class=\"\n" +
	    "            'btn-current' for selectedDt,\n" +
	    "            'active' for activeDt\n" +
	    "            on dt\"\n" +
	    "          ng-click=\"select(dt.date)\"\n" +
	    "          ng-disabled=\"::dt.disabled\"\n" +
	    "          tabindex=\"-1\"><span ng-class=\"::{'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
	    "      </td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
    $templateCache.put("uib/template/datepicker/month.html",
	    "<table class=\"uib-monthpicker\" role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
	    "  <thead>\n" +
	    "    <tr>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
	    "      <th><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
	    "    </tr>\n" +
	    "  </thead>\n" +
	    "  <tbody>\n" +
	    "    <tr class=\"uib-months\" ng-repeat=\"row in rows track by $index\">\n" +
	    "      <td ng-repeat=\"dt in row\" class=\"uib-month text-center\" role=\"gridcell\"\n" +
	    "        id=\"{{::dt.uid}}\"\n" +
	    "        ng-class=\"::dt.customClass\">\n" +
	    "        <button type=\"button\" class=\"btn btn-default\"\n" +
	    "          uib-is-class=\"\n" +
	    "            'btn-current' for selectedDt,\n" +
	    "            'active' for activeDt\n" +
	    "            on dt\"\n" +
	    "          ng-click=\"select(dt.date)\"\n" +
	    "          ng-disabled=\"::dt.disabled\"\n" +
	    "          tabindex=\"-1\"><span ng-class=\"::{'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
	    "      </td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");    
}]);
// if server response 401 or 403 so redirect to unauthorzed page
app.factory('authInterceptor', function ($q, $location, $rootScope, AUTH_EVENTS) {
    return {
        responseError: function (response) {
            $rootScope.$broadcast({
                401: AUTH_EVENTS.notAuthonticated,
                403: AUTH_EVENTS.notAuthorised,
                404: AUTH_EVENTS.notFound,
                500: AUTH_EVENTS.internalServerError
            }[response.status], response);

            return $q.reject(response);
        }
    };
})
//Check $http.post
app.factory('httpInterceptor', ['$q', '$rootScope', function ($q, $rootScope) {
    var loadingCount = 0;
    return {
        request: function (config) {
            if (++loadingCount === 1) $rootScope.$broadcast('loading:progress');
            return config || $q.when(config);
        },
        response: function (response) {
            if (--loadingCount === 0) $rootScope.$broadcast('loading:finish');
            return response || $q.when(response);
        },
        responseError: function (response) {
            if (--loadingCount === 0) $rootScope.$broadcast('loading:finish');
            return $q.reject(response);
        }
    }
}])
//config to look for interception
app.config(function ($httpProvider) {
    $httpProvider.interceptors.push('authInterceptor');
    $httpProvider.interceptors.push('httpInterceptor');
});
//Error Handling
app.config(['$provide',function ($provide) {
    $provide.decorator('$exceptionHandler', ['$delegate', '$window', '$injector', function ($delegate, $window, $injector) {
        return function (exception, cause) {
            $delegate(exception, cause);
            var $rootScope = $injector.get('$rootScope');
            $rootScope.errors.push({
                error: exception.toString(),
                message: exception.message,
                line: exception.lineNumber||'',
                stack: exception.stack,
                cause: cause||'',
                url: $window.location.href, // the location in the browser's address
                company: $rootScope.session.comp_code || '', // $rootScope.session.comp_code
                user: $rootScope.session.user || '',
                os: $rootScope.device.os,
                browser: $rootScope.device.browser,
                device: $rootScope.device.device,
                os_version: $rootScope.device.os_version,
                browser_version: $rootScope.device.browser_version,
                date: new Date()
            });
            var clientSideErrorInfo = {
                error: exception.toString(), // exception name
                message: exception.message, // inner exception message
                line: exception.lineNumber || '', // line number
                stack: exception.stack, // stracktrace
                cause: cause || '', // cause
                url: $window.location.href, // the location in the browser's address
                company: $rootScope.session.comp_code||'', // $rootScope.session.comp_code
                user: $rootScope.session.user || '',
                os: $rootScope.device.os,
                browser: $rootScope.device.browser,
                device: $rootScope.device.device,
                os_version: $rootScope.device.os_version,
                browser_version: $rootScope.device.browser_version
            };
            var procErrorInfo = {
                '@error': exception.toString(), // exception name'
                '@err_Message': exception.message, // inner exception message
                '@line': exception.lineNumber || '', // line number
                '@cause': cause || '', // cause
                '@url': $window.location.href, // the location in the browser's address
                '@company': $rootScope.session.comp_code||'', // $rootScope.session.comp_code
                '@userID':$rootScope.session.user||'',
                '@os': $rootScope.device.os,
                '@browser': $rootScope.device.browser,
                '@device': $rootScope.device.device,
                '@os_Version': $rootScope.device.os_version,
                '@browser_Version': $rootScope.device.browser_version
            };
            $.ajax({
                type: 'POST',
                url: '/App/errorLogging',
                contentType: 'application/json;charset=UTF-8',
                data: JSON.stringify({ log: JSON.stringify({ data: clientSideErrorInfo, procData: procErrorInfo }) }),
                success: function (data) {
                    
                },
                error: function (err) {
                    
                }
            });
        }
    }]);
}]);